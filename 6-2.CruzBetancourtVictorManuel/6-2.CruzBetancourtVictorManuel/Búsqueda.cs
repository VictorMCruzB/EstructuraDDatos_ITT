using System;  // using System;
using System.Collections.Generic;  // using System.Collections.Generic;
using System.Linq;  // using System.Linq;
using System.Text;  // using System.Text;
using System.Threading.Tasks;  // using System.Threading.Tasks;
// Espacio entre código;
namespace _6_2.CruzBetancourtVictorManuel  // Nombre de la práctica;
{  // Se abre la llave;
    class Búsqueda  // ´Se crea la clase Búsqueda;
    {  // Se abre la llave;
        private int[] vector;  // Se declara un vector privado de tipo int que lleva por nombre vector;
        // Espacio entre códigos;
        public void CapturaDatos()  // Se declara un nuevo método público que no regresa valor que lleva por nombre CapturaDatos();
        {  // Se abre la llave;
            Console.WriteLine("Búsqueda Binaria");  // Se imprime el mensaje indicado en la consola y se genera un salto de línea;
            Console.WriteLine("\nIngrese 10 Elementos");  // Se imprime el mensaje indicado en la consola y se genera un salto de línea;
            string linea;  // Se declara una variable de tipo string que lleva por nombre linea;
            vector = new int[10];  // Se le asignan 10 espacios al vector que lleva por nombre vector;
            for (int contador = 0; contador < vector.Length; contador++)  // Se declara un ciclo for que se va a realizar, siempre y cuando, el valor de la variable contador sea menr que la longitus del vector;
            {  // Se abre la llave;
                Console.Write("Ingrese elemento " + (contador + 1) + ": ");  // Se imprime el mensaje indicado en la consola;
                linea = Console.ReadLine();  // Se lee lo ingresado por el usuario y se le asigna a la variable linea;
                vector[contador] = int.Parse(linea);  // Se le asignan los valores indicados al vector;
            }  // Se cierra la llave;
        }  // Se cierra la llave
        // Espacio entre código;
        public void CapturaDatos2()  // Se declara un nuevo método público que no regresa valor que lleva por nombre CapturaDatos2();
        {  // Se abre la llave;
            Console.WriteLine("Búsqueda Binaria");  // Se imprime el mensaje indicado en la consola y se genera un salto de línea;
            Console.WriteLine("\nIngrese 15 Elementos");  // Se imprime el mensaje indicado en la consola y se genera un salto de línea;
            string linea;  // Se declara una variable de tipo string que lleva por nombre linea;
            vector = new int[15];  // Se le asignan 15 espacios al vector que lleva por nombre vector;
            for (int contador = 0; contador < vector.Length; contador++)  // Se declara un ciclo for que se va a realizar, siempre y cuando, el valor de la variable contador sea menr que la longitus del vector;
            {  // Se abre la llave;
                Console.Write("Ingrese elemento " + (contador + 1) + ": ");  // Se imprime el mensaje indicado en la consola;
                linea = Console.ReadLine();  // Se lee lo ingresado por el usuario y se le asigna a la variable linea;
                vector[contador] = int.Parse(linea);  // Se le asignan los valores indicados al vector;
            }  // Se cierra la llave;
        }  // Se cierra la llave;
        // Espacio entre código;
        public void BúsquedaBinaria(int num)  // Se declara un método público que no regresa valor que lleva por nombre BúsquedaBinaria() y esta sobrecargado con una variable llamada num;
        {  // Se abre la llave;
            int l = 0, h = 9;  // Se declaran dos variables de tipo int l=0 y h=9;
            int m = 0;  // Se declara una variable de tipo int m=0;
            bool found = false;  // Se declara una variable de tipo bool que lleva por nombre found y se inicializa con el valor de false;
            // Espacio entre código;
            while (l <= h && found == false)  // Se declara un ciclo while que dice que se va a ejecutar mientras l sea menor o igual a h y found sea igual a false;
            {  // Se abre la llave;
                m = (l + h) / 2;  // A la variable m se le asigna el valor del resultado de la siguiente operación (l + h) / 2;
                if (vector[m] == num)  // Se crea un ciclo if que dice si vector[m] es igual a num;
                    found = true;  // A la variable found se le asigna un valor de verdadero;
                if (vector[m] > num)  // Se crea un ciclo if que dice si vector[m] es mayor a num;
                    h = m - 1;  // A la variable h se le asigna el valor de la siguiente operación m-1;
                else  // Sino;
                    l = m + 1;  // A la variable l se le asigna el valor de la siguiente operación m+1;
            }  // Se cierra la llave;
            if (found == false)  // Se crea un ciclo if que dice si found es igual a false;
            {  // Se abre la llave; 
                Console.Write("\nEl elemento {0} no se encuentra en el arreglo", num);  // Se imprime el mensaje indicado en la consola y se genera un salto de línea; 
            }  // Se cierra la llave;
            else  // Sino;
            {  // Se abre la llave; 
                Console.Write("\nEl elemento {0} se encuentra en la posicion: {1}", num, m + 1);  // Se imprime el mensaje indicado en la consola y se genera un salto de línea; 
            }  // Se cierra la llave;
        }  // Se cierra la llave;
        // Espacio entre código;
        public void Imprimir()  // Se declara un método público que no regresa valor que lleva por nombre Imprimir();
        {  // Se abre la llave;
            Console.WriteLine("\nElementos ingresados en el vector");  // Se imprime el mensaje indicado en la consola;
            for (int contador = 0; contador < vector.Length; contador++)  // Se declara un ciclo for que se va a realizar, siempre y cuando, el valor de la variable contador sea menr que la longitus del vector;
            {  // Se abre la llave;
                Console.Write(vector[contador] + "  ");  // Se imprime el vector en la consola;
            }  // Se cierra la llave;
        }  // Se cierra la llave;
        // Espacio entre código;
        public void Ejemplo1()  // Se declara un nuevo método público que no regresa valor que lleva por nombre Ejemplo1();
        {  // Se abre lallave;
            CapturaDatos();  // Se manda a llamar al método CapturaDatos();
            Imprimir();  // Se manda a llamar al método Imprimir();
            Console.Write("\n\n¿Qué elemento desea buscar en el arreglo? ");  // Se imprime el mensaje indicado en la consola;
            int num = int.Parse(Console.ReadLine());  // Se lee lo que el usuario ingresa en la consola y se asigna a la variable num;
            BúsquedaBinaria(num);  // Se manda a llamar al método sobrecargado BúsquedaBinaria();
            Console.ReadKey();  // Se genera una pausa en el código;
        }  // Se cierra la llave;
        // Espacio entre código;
        public void Ejemplo2()  // Se declara un nuevo método público que no regresa valor que lleva por nombre Ejemplo2();
        {  // Se abre la llave;
            CapturaDatos2();  // Se manda a llamar al método CapturaDatos2();  
            Imprimir();  // Se manda a llamar al método Imprimir();
            Console.Write("\n\n¿Qué elemento desea buscar en el arreglo?: ");  // Se imprime el mensaje indicado en la consola;
            int num = int.Parse(Console.ReadLine());  // Se lee lo que el usuario ingresa en la consola y se asigna a la variable num;
            BúsquedaBinaria(num);  // Se manda a llamar al método sobrecargado BúsquedaBinaria();
            Console.ReadKey();  // Se genera una pausa en el código;
        }  // Se cierra la llave;
    }  // Se cierra la llave;
}  // Se cierra la llave;
