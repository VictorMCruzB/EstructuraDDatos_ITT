using System;  // using System;
using System.Collections.Generic;  // using System.Collections.Generic;
using System.Linq;  // using System,Linq;
using System.Text;  // using System.Text;
using System.Threading.Tasks;  // using System,Threading.Tasks;
// Espacio entre lïneas;
namespace _5_3.CruzBetancourtVictorManuel  // Nombre de la práctica;
{  // Se abre la llave;
    class Radix  // Se crea la clase Radix;
    {  // Se abre la llave;
        public void Ordenar(int[] array)  // Se declara un método público que no regresa valores, que lleva por nombre Ordenar y está sobrecargado con un arreglo, que lleva por nombre arreglo;
        {  // Se abre la llave;
            int[] Arreglo = new int[array.Length];  // Se declara un arreglo de tipo int, que lleva por nombre Arreglo y su tamaño es el del arreglo que viene como parámetro en el presente método;
            for (int i = 31; i > -1; i--)  // Se declara un ciclo for que se inicializa en 31 y se va a ejecutar, siempre y cuando la i sea mayor a -1; 
            {  // Se abre la llave;
                int var = 0;  // Se declara una variable de tipo int, que lleva por nombre var y se inicializa en 0;
                for (int j = 0; j < array.Length; j++)  // Se declara un ciclo for que se inicializa en 0 y se va a ejecutar, siempre y cuando la j sea menor que el tamaño del array;
                {  // Se abre la llave;
                    bool mover = (array[j] << i) >= 0;  // Se declara una variable de tipo bool, que lleva por nombre mover y se iguala al valor de (array[j] << i) >= 0;
                    if (i == 0 ? !mover : mover)  // Se declara un ciclo if que dice que si la i es igual es cero se evalúa y devuelve !mover, de lo contrario devuelve mover;
                        array[j - var] = array[j];  // array[j - var] toma el valor de array[j];
                    else  // Sino;
                        Arreglo[var++] = array[j];  // Arreglo[var++] toma el valor de array[j];
                }  // Se cierra la llave;
                Array.Copy(Arreglo, 0, array, array.Length - var, var);  // Se hace uso del métodoArray.Copy para copiar un arreglo en otro;
            }  // Se cierra la llave;
        }  // Se cierra la llave;
    }  // Se cierra la llave;
}  // Se cierra la llave;
